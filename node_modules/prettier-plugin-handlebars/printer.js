
const { NodeType } = require('./parser');

function printHandlebars(path, options, print) {
  const node = path.getValue();
  
  switch (node.type) {
    case NodeType.DOCUMENT:
      return printChildren(path, options, print, 'children');
      
    case NodeType.TEXT:
      return node.content.trim() ? node.content : '';
      
    case NodeType.EXPRESSION:
      return printExpression(node, options);
      
    case NodeType.BLOCK:
      return printBlock(node, path, options, print);
      
    case NodeType.PARTIAL:
      return printPartial(node, options);
      
    case NodeType.COMMENT:
      return `{{!-- ${node.content} --}}`;
      
    case NodeType.HTML_ELEMENT:
      return node.content;
      
    default:
      return '';
  }
}

function printExpression(node, options) {
  const helper = printHelper(node.helper, options);
  return `{{${helper}}}`;
}

function printBlock(node, path, options, print) {
  if (node.isClosing) {
    return `{{/${node.helper.name}}}`;
  }
  
  const helper = printHelper(node.helper, options);
  let result = `{{#${helper}}}`;
  
  if (node.children && node.children.length > 0) {
    const childrenDoc = printChildren(path, options, print, 'children');
    result += childrenDoc;
  }
  
  if (node.elseNode) {
    result += '{{else}}';
    // Would need to handle else children here in a full implementation
  }
  
  result += `{{/${node.helper.name}}}`;
  
  return result;
}

function printPartial(node, options) {
  let result = '{{> ';
  
  if (typeof node.name === 'string') {
    result += node.name;
  } else if (node.name.type === 'String') {
    result += `"${node.name.value}"`;
  }
  
  if (node.args && node.args.length > 0) {
    result += ' ' + printArguments(node.args, options);
  }
  
  result += '}}';
  return result;
}

function printHelper(helper, options) {
  let result = helper.name;
  
  if (helper.args && helper.args.length > 0) {
    result += ' ' + printArguments(helper.args, options);
  }
  
  if (helper.isSubExpression) {
    result = `(${result})`;
  }
  
  return result;
}

function printArguments(args, options) {
  return args.map(arg => {
    if (arg.type === 'NamedArgument') {
      const value = typeof arg.value === 'object' && arg.value.type === 'String' 
        ? `"${arg.value.value}"` 
        : arg.value;
      return `${arg.key}=${value}`;
    } else if (arg.type === 'PositionalArgument') {
      if (typeof arg.value === 'object') {
        if (arg.value.type === 'String') {
          return `"${arg.value.value}"`;
        } else if (arg.value.isSubExpression) {
          return printHelper(arg.value, options);
        }
      }
      return arg.value;
    }
    return arg;
  }).join(' ');
}

function printChildren(path, options, print, childrenProperty) {
  const children = path.getValue()[childrenProperty];
  if (!children || children.length === 0) {
    return '';
  }
  
  return path.map((childPath) => {
    const childNode = childPath.getValue();
    if (childNode.type === NodeType.TEXT && !childNode.content.trim()) {
      return '';
    }
    return print(childPath);
  }, childrenProperty).join('');
}

const printers = {
  'handlebars-ast': {
    print: printHandlebars,
    embed: (path, options) => {
      const node = path.getValue();
      const { textToDoc } = options;

      // Handle HTML content within Handlebars
      if (node.type === NodeType.HTML_ELEMENT) {
        try {
          // Try to format as HTML using Prettier's HTML parser
          return textToDoc(node.content, { parser: 'html' });
        } catch (e) {
          return node.content;
        }
      }

      return null;
    }
  }
};

module.exports = { printers };
